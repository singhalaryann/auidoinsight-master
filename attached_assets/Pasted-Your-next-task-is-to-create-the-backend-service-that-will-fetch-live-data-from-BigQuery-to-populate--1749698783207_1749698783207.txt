Your next task is to create the backend service that will fetch live data from BigQuery to populate our business snapshot metrics.

You've made excellent points that significantly improve the plan. We will adopt a new, on-the-fly architecture. Data will be fetched and processed live when the API is called, and we will use a structured system for date filters.

### High-Level Flow

1.  A user requests `GET /api/business-snapshot`.
2.  The API fetches the user's top tags (e.g., `['engagement', 'retention']`).
3.  It retrieves the required metric *definitions* (e.g., `source_query`, `queryParams`) and insight definitions from the database based on the tags.
4.  For each metric, the API will call a new **`SnapshotProcessor`** service.
5.  The processor will prepare the SQL query. It will generate a date filter clause based on `queryParams` and replace all other `{{placeholders}}`.
6.  The prepared query is sent to the **`BigQuery`** service for execution.
7.  The processor transforms the raw BigQuery result into the final JSON payload required by the frontend.
8.  The API combines all the processed metrics and the static insights into a single response.

### Detailed Instructions

1.  **Install the BigQuery Client Library:**
    *   Add the `@google-cloud/bigquery` package to the project's dependencies.

2.  **Create a BigQuery Service (`server/services/bigquery.ts`):**
    *   This file's only job is to run a prepared query.
    *   Create and export an async function: `executeBigQuery(query: string)`.
    *   **Authentication:**
        *   Instantiate the BigQuery client using a service account. Read credentials (`project_id`, `private_key`, `client_email`) from environment variables. Remember to correctly handle newlines in the private key (`private_key.replace(/\\n/g, '\n')`).
    *   **Query Execution:**
        *   Execute the `query` string it receives and return the raw results.

3.  **Create a `SnapshotProcessor` Service (`server/services/snapshot_processor.ts`):**
    *   This service will contain the core logic for processing a single metric definition.
    *   Export an async function `processMetric(metric: SnapshotMetric): Promise<any>`.
    *   Inside `processMetric`:
        *   **A. Prepare Query:** Call a local helper function `prepareQuery(metric)`. This function must:
            *   Read `metric.queryParams.date_filter_clause` (e.g., 'TODAY', '1W', '1M', 'YESTERDAY').
            *   Generate the appropriate SQL `WHERE` clause (e.g., `WHERE date_col >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)`).
            *   Replace a single `{{date_filter}}` placeholder in the `metric.source_query` with this generated clause.
            *   Replace any other `{{placeholders}}` in the query using the rest of `metric.queryParams`.
        *   **B. Execute Query:** Call `executeBigQuery` with the prepared SQL.
        *   **C. Transform Result:** Call a local helper function `transformResult(metric, bigQueryResult)`. This function will format the raw data into the final JSON the frontend needs, based on the metric's `display_config`.
        *   Return the final transformed JSON payload for that single metric.

4.  **Update the API Endpoint in `server/routes.ts`:**
    *   Modify the `GET /api/business-snapshot` endpoint.
    *   After getting the user's top tags, call the storage function `getSnapshotDefinitionsByTags(tags)` to get the raw metric and insight definitions.
    *   For the **metrics**, use `Promise.all` to call `processMetric(metric)` for each one. This will return an array of processed data payloads.
    *   Combine the original metric definitions with their newly fetched data payloads. The final metric objects sent to the frontend should look like: `{ ...metricDefinition, liveData: processedPayload }`.
    *   Assemble and return the final API response, which should be an object: `{ metrics: [...], insights: [...] }`.

5.  **Update the Storage Layer at `server/storage.ts`:**
    *   Rename the `getBusinessSnapshotData` function to `getSnapshotDefinitionsByTags(tags: string[])`.
    *   This function will simply fetch the raw metric and insight definitions from the database based on the tags. It should not perform any data processing.
    *   The function `updateMetricPayload` is no longer needed and should be deleted.
