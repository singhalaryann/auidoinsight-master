# Analysis: Impact of Heavy Booster Usage on Next-Day Retention

## Research Question

Does heavy booster usage improve next‑day retention?

**Restated:**
Do players who show heavy booster usage (>10 per day) come again the next day?

## Hypothesis

- **Null hypothesis (H₀):**
  - The probability of next-day retention for heavy booster users is equal to that for light users.
  - Mathematically:  
    p(D1 retained | heavy) = p(D1 | light)
- **Alternative hypothesis (H₁):**
  - The probability of next-day retention for heavy booster users is greater than that for light users.

## Data Extraction

### Step 1: Calculate Daily Booster Usage

```sql
SELECT
    user_id,
    active_date,
    SUM(
      CASE 
        WHEN j.element.player_booster_activate IS NULL 
          OR j.element.player_booster_activate = '' 
        THEN 0
        ELSE ARRAY_LENGTH(SPLIT(j.element.player_booster_activate, ':'))
      END
    ) AS daily_total_boosters
  FROM `bp.data3m`
  CROSS JOIN UNNEST(game_end_v2.list) AS j
  WHERE
    j.element.game_type = 'pvp'
    AND j.element.boosters IS NOT NULL
    AND j.element.boosters != ''
    AND j.element.boosters != '[]'
  GROUP BY user_id, active_date
```

- Saved as: `xgcrypt.bp.daily_booster_usage`
- Example output:

| user_id                        | active_date | daily_total_boosters |
|-------------------------------|-------------|---------------------|
| GwKn3acOgHOEM1rKKn34Wt3KSM73   | 2025-01-30  | 22                  |

### Step 2: Compute Next-Day Retention

```sql
SELECT
  user_id,
  active_date,
  daily_total_boosters,
  CASE
    WHEN DATE_DIFF(next_active_date, active_date, DAY) = 1 THEN TRUE
    ELSE FALSE
  END AS active_next_day
FROM (
  SELECT
    user_id,
    active_date,
    daily_total_boosters,
    LEAD(active_date) OVER (PARTITION BY user_id ORDER BY active_date) AS next_active_date
  FROM
    xgcrypt.bp.daily_booster_usage
)
```

- Saved as: `next_day_retention_bstr_usage`
- Example output:

| user_id                      | active_date | daily_total_boosters | active_next_day |
|-----------------------------|-------------|---------------------|-----------------|
| 2YjcqoqbpJTlfeSgEcVl0KfsDwB3 | 2025-03-11  | 6                   | false           |

## Statistical Test

To test if heavy booster usage is associated with higher next-day retention, a two-proportion z-test was performed.

- **Null hypothesis (H₀):** Retention rate for heavy users is less than or equal to that of light users.
- **Alternative hypothesis (H₁):** Retention rate for heavy users is greater than that of light users.

### Python Script Used

The following script was used for the analysis (`retention_z_test.py`):

```python
import os
from google.cloud import bigquery
from statsmodels.stats.proportion import proportions_ztest

# Set the path to your service account key file
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "bq-readonly-bp-key.json"

# Initialize the BigQuery client
client = bigquery.Client()

# Define your query to get the counts for heavy and light users
query = """
WITH user_groups AS (
  SELECT
    CASE
      WHEN daily_total_boosters >= 10 THEN 'heavy'
      ELSE 'light'
    END AS user_group,
    active_next_day
  FROM
    `xgcrypt.bp.next_day_retention_bstr_usage`
)
SELECT
  user_group,
  COUNTIF(active_next_day IS TRUE) AS retained_count,
  COUNT(*) AS total_count
FROM
  user_groups
GROUP BY
  user_group
"""

# Run the query
query_job = client.query(query)
results = query_job.result()

# Process the results
counts = {}
for row in results:
    counts[row['user_group']] = {
        'retained': row['retained_count'],
        'total': row['total_count']
    }

heavy_retained = counts.get('heavy', {}).get('retained', 0)
heavy_total = counts.get('heavy', {}).get('total', 0)
light_retained = counts.get('light', {}).get('retained', 0)
light_total = counts.get('light', {}).get('total', 0)

# Perform the two-proportion z-test
# H0: p_heavy <= p_light (Retention of heavy users is less than or equal to light users)
# H1: p_heavy > p_light (Retention of heavy users is greater than light users)
stat, p_value = proportions_ztest(
    count=[heavy_retained, light_retained],
    nobs=[heavy_total, light_total],
    alternative='larger'
)

print("Two-proportion z-test results:")
print(f"Z-statistic: {stat}")
print(f"P-value: {p_value}")

# Interpretation of the results
alpha = 0.05
if p_value < alpha:
    print("The null hypothesis is rejected. Heavy booster usage is associated with a higher next-day retention rate.")
else:
    print("The null hypothesis cannot be rejected. There is not enough evidence to say that heavy booster usage improves next-day retention.")

print(f"\nHeavy users (>= 10 boosters/day): {heavy_retained} retained out of {heavy_total}")
print(f"Light users (< 10 boosters/day): {light_retained} retained out of {light_total}")

if heavy_total > 0:
    heavy_retention_rate = (heavy_retained / heavy_total) * 100
    print(f"Heavy user retention rate: {heavy_retention_rate:.2f}%")

if light_total > 0:
    light_retention_rate = (light_retained / light_total) * 100
    print(f"Light user retention rate: {light_retention_rate:.2f}%")
```

### Script Output

```
Two-proportion z-test results:
Z-statistic: 111.50048165387538
P-value: 0.0
The null hypothesis is rejected. Heavy booster usage is associated with a higher next-day retention rate.

Heavy users (>= 10 boosters/day): 6141 retained out of 9413
Light users (< 10 boosters/day): 211884 retained out of 1096554
Heavy user retention rate: 65.24%
Light user retention rate: 19.32%
```

## Conclusion

The updated results still show a statistically significant difference. The retention rate for heavy booster users (≈65%) is more than triple that of light users (≈19%), providing strong evidence that heavy booster usage is positively correlated with next-day retention. 